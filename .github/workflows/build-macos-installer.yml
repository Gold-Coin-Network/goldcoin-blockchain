name: MacOS Intel installer on Python 3.9

on:
  #push:
  #  branches:
  #    - main
  #  tags:
  #      - '**'
  #pull_request:
  #  branches:
  #    - '**'   
  workflow_dispatch:

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ github.ref == 'refs/heads/main' && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: MacOS Intel Installer on Python 3.9
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]
        os: [macOS-latest]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_APPLE_SECRET
        unset HAS_AWS_SECRET

        if [ -n "$APPLE_SECRET" ]; then HAS_APPLE_SECRET='true' ; fi
        echo ::set-output name=HAS_APPLE_SECRET::${HAS_APPLE_SECRET}

        if [ -n "$AWS_SECRET" ]; then HAS_AWS_SECRET='true' ; fi
        echo ::set-output name=HAS_AWS_SECRET::${HAS_AWS_SECRET}
      env:
        APPLE_SECRET: "${{ secrets.APPLE_DEV_ID_APP }}"
        AWS_SECRET: "${{ secrets.INSTALLER_UPLOAD_KEY }}"

    - name: Create installer version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip install setuptools_scm
        echo "::set-output name=GOLDCOIN_INSTALLER_VERSION::$(python3 ./build_scripts/installer-version.py)"
        deactivate

    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache npm
      uses: actions/cache@v2.1.6
      env:
        cache-name: cache-node-modules
      with:
        # npm cache files are stored in `~/.npm` on Linux/macOS
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"

    - name: Cache pip
      uses: actions/cache@v2.1.6
      with:
        # Note that new runners may break this https://github.com/actions/cache/issues/292
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Import Apple app signing certificate
      if: steps.check_secrets.outputs.HAS_APPLE_SECRET
      uses: Apple-Actions/import-codesign-certs@v1
      with:
        p12-file-base64: ${{ secrets.APPLE_DEV_ID_APP }}
        p12-password: ${{ secrets.APPLE_DEV_ID_APP_PASS }}

    # Get the most recent release from chia-plotter-madmax
    - uses: actions/github-script@v4
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const releases = await github.repos.listReleases({
            owner: 'Chia-Network',
            repo: 'chia-plotter-madmax',
          });
          return releases.data[0].tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/goldcoin_plot" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot-${{ steps.latest-madmax.outputs.result }}-macos-intel
        wget -O "$GITHUB_WORKSPACE/madmax/goldcoin_plot_k34" https://github.com/Chia-Network/chia-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chia_plot_k34-${{ steps.latest-madmax.outputs.result }}-macos-intel
        chmod +x "$GITHUB_WORKSPACE/madmax/goldcoin_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/goldcoin_plot_k34"

    - name: Run install script
      env:
        INSTALL_PYTHON_VERSION: ${{ matrix.python-version }}
        BUILD_VDF_CLIENT: "N"
      run: |
        sh install.sh

    - name: Setup Node 16.x
      uses: actions/setup-node@v2.4.1
      with:
        node-version: '16.x'

    - name: Build MacOS DMG
      env:
        NOTARIZE: ${{ steps.check_secrets.outputs.HAS_APPLE_SECRET }}
        APPLE_NOTARIZE_USERNAME: "${{ secrets.APPLE_NOTARIZE_USERNAME }}"
        APPLE_NOTARIZE_PASSWORD: "${{ secrets.APPLE_NOTARIZE_PASSWORD }}"
      run: |
        . ./activate
        cd ./goldcoin-blockchain-gui
        git status
        cd ../build_scripts
        sh build_macos.sh

    - name: Upload MacOS artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Goldcoin-Installer-MacOS-intel-dmg
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Create Checksums
      run: |
        ls
        shasum -a 256 ${{ github.workspace }}/build_scripts/final_installer/Goldcoin-${{ steps.version_number.outputs.GOLDCOIN_INSTALLER_VERSION }}.dmg > ${{ github.workspace }}/build_scripts/final_installer/Goldcoin-${{ steps.version_number.outputs.GOLDCOIN_INSTALLER_VERSION }}.dmg.sha256

    - name: Upload to s3
      if: steps.check_secrets.outputs.HAS_AWS_SECRET
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.INSTALLER_UPLOAD_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
        AWS_REGION: us-west-2
        GOLDCOIN_INSTALLER_VERSION: ${{ steps.version_number.outputs.GOLDCOIN_INSTALLER_VERSION }}
      run: |
        GIT_SHORT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-8)
        GOLDCOIN_DEV_BUILD=${GOLDCOIN_INSTALLER_VERSION}-$GIT_SHORT_HASH
        echo "GOLDCOIN_DEV_BUILD=$GOLDCOIN_DEV_BUILD" >>$GITHUB_ENV
        aws s3 cp ${{ github.workspace }}/build_scripts/final_installer/Goldcoin-${{ steps.version_number.outputs.GOLDCOIN_INSTALLER_VERSION }}.dmg s3://download-goldcoin-net/builds/Goldcoin-${GOLDCOIN_DEV_BUILD}.dmg

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      run: |
        echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"
        echo "::set-output name=REPO_NAME::$(echo ${{ github.repository }} | cut -d'/' -f 2)"

    - name: Mark installer complete
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        curl -s -XPOST -H "Authorization: Bearer ${{ secrets.GLUE_ACCESS_TOKEN }}" --data '{"goldcoin_ref": "${{ steps.tag-name.outputs.TAG_NAME }}"}' ${{ secrets.GLUE_API_URL }}/api/v1/${{ steps.tag-name.outputs.REPO_NAME }}/${{ steps.tag-name.outputs.TAG_NAME }}/success/build-macos
